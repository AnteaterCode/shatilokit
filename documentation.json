{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ShAutocompleteTriggerDirective",
            "id": "directive-ShAutocompleteTriggerDirective-69f6cb909d240e0ba85e9b54c56645d9",
            "file": "src/app/components/autocomplete/autocomplete-trigger.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, OnDestroy, forwardRef, ExistingProvider, Input, ElementRef, ViewContainerRef, Optional, Inject } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    ConnectionPositionPair,\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    PositionStrategy\n  } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\n\nimport { AutocompleteComponent } from './autocomplete.component';\nimport { Subscription, merge, fromEvent } from 'rxjs';\n\n\nexport const SH_AUTOCOMPLETE_VALUE_ACCESSOR: ExistingProvider = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ShAutocompleteTriggerDirective),\n    multi: true\n  };\n\n\n@Directive({\n    selector: `input[shAutocomplete], textarea[shAutocomplete]`,\n    exportAs: 'shAutocompleteTrigger',\n    providers: [SH_AUTOCOMPLETE_VALUE_ACCESSOR],\n    host: {\n      autocomplete: 'off',\n      '(input)': 'handleInput($event)',\n      'aria-autocomplete': 'list'\n    }\n  })\n  export class ShAutocompleteTriggerDirective implements ControlValueAccessor, OnDestroy {\n    @Input() shAutocomplete!: AutocompleteComponent;\n\n    private overlayRef: OverlayRef | null = null;\n    private portal: TemplatePortal<{}> | null = null;\n    private positionStrategy!: FlexibleConnectedPositionStrategy;\n\n    private overlayBackdropClickSubscription!: Subscription;\n\n    constructor(\n        private elementRef: ElementRef, // обертка над нативным элементом\n        private overlay: Overlay, // сервис для всплывающих панелей\n        private viewContainerRef: ViewContainerRef, // Апи для создания новых вьюх у текущего компонента\n        @Optional() @Inject(DOCUMENT) private document: any\n    ) {}\n\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n    registerOnChange(fn: any): void {\n        this._onChange = fn;\n    }\n    registerOnTouched(fn: any): void {\n        this._onTouched = fn;\n    }\n    setDisabledState?(isDisabled: boolean): void {\n\n    }\n\n    _onChange: (value: any) => void = () => {};\n    _onTouched = () => {};\n\n    private setTriggerValue(value: any): void {\n        // устанавливаем значения в ng контрол и нативный элемент\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        console.log(event);\n        const target = event.target as HTMLInputElement;\n        // const document = this.document as Document;\n        let value: number | string | null = target.value;\n\n        if (target.type === 'number') {\n          value = value === '' ? null : parseFloat(value);\n        }\n       // if (this.previousValue !== value) {\n        //  this.previousValue = value;\n       //   this.onChange(value);\n\n       //   if (this.canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n        //  }\n       // }\n    }\n\n    openPanel(): void {\n        // this.previousValue = this.elementRef.nativeElement.value;\n        this.attachOverlay();\n        // this.updateStatus();\n    }\n\n    private attachOverlay(): void {\n        console.log('attachOverlay');\n        if (!this.portal && this.shAutocomplete.template) {\n            // берем шаблон ангуляр компонента и отображаем его в другом месте\n            this.portal = new TemplatePortal(this.shAutocomplete.template, this.viewContainerRef);\n        }\n\n        if (!this.overlayRef) {\n            // Создаем ссылку на всплываху\n            this.overlayRef = this.overlay.create(this.getOverlayConfig());\n        }\n\n        if (this.overlayRef && !this.overlayRef.hasAttached()) {\n            this.overlayRef.attach(this.portal);\n            // this.selectionChangeSubscription = this.subscribeSelectionChange();\n            this.overlayBackdropClickSubscription = this.subscribeOverlayBackdropClick();\n            // this.optionsChangeSubscription = this.subscribeOptionsChange();\n           // this.overlayRef\n           //   .detachments()\n           //   .pipe(takeUntil(this.destroy$))\n           //   .subscribe(() => {\n           //     this.closePanel();\n            //  });\n          }\n\n        this.shAutocomplete.isOpen = true;\n    }\n\n    /**\n   * Подписка на клик за пределами панели\n   */\n    private subscribeOverlayBackdropClick(): Subscription {\n        return merge<MouseEvent | TouchEvent>(\n        fromEvent<MouseEvent>(this.document, 'click'),\n        fromEvent<TouchEvent>(this.document, 'touchend')\n        ).subscribe((event: MouseEvent | TouchEvent) => {\n        const clickTarget = event.target as HTMLElement;\n        console.log('subscribeOverlayBackdropClick');\n        // Make sure is not self\n        // tslint:disable-next-line:no-non-null-assertion\n        if (clickTarget !== this.elementRef.nativeElement && !this.overlayRef!.overlayElement.contains(clickTarget) ) {\n            this.closePanel();\n        }\n        });\n    }\n\n    closePanel(): void {\n        // if (this.panelOpen) {\n        //  this.shAutocomplete.isOpen = this.panelOpen = false;\n\n          if (this.overlayRef && this.overlayRef.hasAttached()) {\n            // this.selectionChangeSubscription.unsubscribe();\n            this.overlayBackdropClickSubscription.unsubscribe();\n            // this.optionsChangeSubscription.unsubscribe();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n            this.portal = null;\n          }\n        // }\n      }\n\n    ngOnDestroy(): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n          positionStrategy: this.getOverlayPosition(),\n          disposeOnNavigation: true,\n          scrollStrategy: this.overlay.scrollStrategies.reposition(),\n          // default host element width\n          width: this.shAutocomplete.shWidth || this.getHostWidth()\n        });\n    }\n\n    private getOverlayPosition(): PositionStrategy {\n        const positions = [\n          new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n          new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\n        ];\n        this.positionStrategy = this.overlay\n          .position()\n          .flexibleConnectedTo(this.getConnectedElement())\n          .withFlexibleDimensions(false)\n          .withPush(false)\n          .withPositions(positions)\n          .withTransformOriginOn('.sh-select-dropdown');\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef {\n        return this.elementRef;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n}\n",
            "selector": "input[shAutocomplete], textarea[shAutocomplete]",
            "providers": [
                {
                    "name": "SH_AUTOCOMPLETE_VALUE_ACCESSOR"
                }
            ],
            "inputsClass": [
                {
                    "name": "shAutocomplete",
                    "line": 36,
                    "type": "AutocompleteComponent"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "overlayBackdropClickSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "overlayRef",
                    "defaultValue": "null",
                    "type": "OverlayRef | null",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "portal",
                    "defaultValue": "null",
                    "type": "TemplatePortal<literal type> | null",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "positionStrategy",
                    "type": "FlexibleConnectedPositionStrategy",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "attachOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "closePanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142
                },
                {
                    "name": "getConnectedElement",
                    "args": [],
                    "optional": false,
                    "returnType": "ElementRef",
                    "typeParameters": [],
                    "line": 186,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getHostWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 190,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getOverlayConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 161,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getOverlayPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "PositionStrategy",
                    "typeParameters": [],
                    "line": 171,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "handleInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157
                },
                {
                    "name": "openPanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTriggerValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeOverlayBackdropClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 127,
                    "description": "<p>Подписка на клик за пределами панели</p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "ControlValueAccessor",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "document",
                        "type": "any"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ShInputDirective",
            "id": "directive-ShInputDirective-124f3399a4e483553163d0d8c8c16081",
            "file": "src/app/components/input/input.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, OnInit, Input, Optional, Self, Renderer2, ElementRef } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\n@Directive({\n  selector: 'input[sh-input]',\n  exportAs: 'shInput',\n})\nexport class ShInputDirective implements OnInit {\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value != null && `${value}` !== 'false';\n  }\n  _disabled = false;\n\n  constructor(@Optional() @Self() public ngControl: NgControl, renderer: Renderer2, elementRef: ElementRef) {\n    console.log('inppppp');\n    renderer.addClass(elementRef.nativeElement, 'sh-input');\n  }\n\n  ngOnInit() {\n  }\n\n}\n",
            "selector": "input[sh-input]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "line": 10,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "ngControl",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-cc22d11e9503df5f2646af0a4b129c8e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'ngshatilokit'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'ngshatilokit';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div>\n  button\n</div>\n<sh-buttondemo></sh-buttondemo>\n<div>\n  input\n</div>\n<sh-inputdemo></sh-inputdemo>\n<div>\n  autocomplete\n</div>\n<sh-autocompletedemo>\n</sh-autocompletedemo>\n<div>\n  select\n</div>\n"
        },
        {
            "name": "AutocompleteComponent",
            "id": "component-AutocompleteComponent-c75d06e014c424c59e57b8287435fe07",
            "file": "src/app/components/autocomplete/autocomplete.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "shAutocomplete",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sh-autocomplete",
            "styleUrls": [
                "./autocomplete.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./autocomplete.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "shDataSource",
                    "line": 16,
                    "type": "any"
                },
                {
                    "name": "shWidth",
                    "line": 15,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'content', {static: false}"
                        }
                    ]
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "panel",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'panel', {static: false}"
                        }
                    ]
                },
                {
                    "name": "template",
                    "type": "TemplateRef<literal type>",
                    "optional": true,
                    "description": "<p>cdk-overlay </p>\n",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, ViewEncapsulation, Input, ViewChild, TemplateRef, ElementRef } from '@angular/core';\nimport { ShAutocompleteOptionComponent } from './autocomplete-option.component';\n\n@Component({\n  selector: 'sh-autocomplete',\n  exportAs: 'shAutocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AutocompleteComponent  {\n\n  @Input() shWidth?: number;\n  @Input() shDataSource?: any;\n\n  isOpen = false;\n\n   /** cdk-overlay */\n   @ViewChild(TemplateRef, { static: false }) template?: TemplateRef<{}>;\n   @ViewChild('panel', { static: false }) panel?: ElementRef;\n   @ViewChild('content', { static: false }) content?: ElementRef;\n\n  constructor() { }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sh-select-item-option-selected:not(.sh-select-item-option-disabled) {\n    color: rgba(0,0,0,.65);\n    font-weight: 600;\n    background-color: #e6f7ff;\n}\n\n.sh-select-item-option {\n    display: flex;\n}\n\n.sh-select-item {\n    cursor: pointer;\n    transition: background .3s ease;\n}\n\n.sh-select-item, .sh-select-item-empty {\n    position: relative;\n    display: block;\n    min-height: 32px;\n    padding: 5px 12px;\n    color: rgba(0,0,0,.65);\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 22px;\n}",
                    "styleUrl": "./autocomplete.component.scss"
                }
            ],
            "stylesData": "",
            "preserveWhitespaces": false,
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "templateData": "<ng-template>\n  <div #panel class=\"ng-select-dropdown ng-select-dropdown-placement-bottomLeft\" \n     >\n    <div style=\"max-height: 256px; overflow-y: auto; overflow-anchor: none;\">\n      <div style=\"display: flex; flex-direction: column;\">\n        <ng-template *ngTemplateOutlet=\"shDataSource ? optionsTemplate : contentTemplate\"></ng-template>\n      </div>\n    </div>\n  </div>\n  <ng-template #contentTemplate>\n    <ng-content></ng-content>\n  </ng-template>\n  <ng-template #optionsTemplate>\n    <sh-autocomplete-option *ngFor=\"let option of shDataSource!\" [value]=\"option\"\n      [label]=\"option && $any(option).label ? $any(option).label : $any(option)\">\n      {{ option && $any(option).label ? $any(option).label : $any(option) }}\n    </sh-autocomplete-option>\n  </ng-template>\n</ng-template>"
        },
        {
            "name": "AutocompletedemoComponent",
            "id": "component-AutocompletedemoComponent-7558a38bed2b210dfc9cba38908e74ef",
            "file": "src/app/showcase/components/autocompletedemo/autocompletedemo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sh-autocompletedemo",
            "styleUrls": [
                "./autocompletedemo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./autocompletedemo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sh-autocompletedemo',\n  templateUrl: './autocompletedemo.component.html',\n  styleUrls: ['./autocompletedemo.component.scss']\n})\nexport class AutocompletedemoComponent implements OnInit {\n  dataSource = [];\n  constructor() {\n    // {label: '55', value: 'drer'}, {label: 'sdnglkangrkj', value: 'drer'}\n    this.dataSource.push({label: '55', value: 'drer'});\n    this.dataSource.push({label: 'ff', value: 'drer'});\n    console.log(this.dataSource);\n  }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./autocompletedemo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <input placeholder=\"input here\" sh-input [shAutocomplete]=\"auto\">\n  <sh-autocomplete #auto [shDataSource]='dataSource'>\n  </sh-autocomplete>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtondemoComponent",
            "id": "component-ButtondemoComponent-8539aba3cadbf7f3e7232080aaea492d",
            "file": "src/app/showcase/components/buttondemo/buttondemo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sh-buttondemo",
            "styleUrls": [
                "./buttondemo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./buttondemo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sh-buttondemo',\n  templateUrl: './buttondemo.component.html',\n  styleUrls: ['./buttondemo.component.scss']\n})\nexport class ButtondemoComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./buttondemo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button shButton > кнопка </button>"
        },
        {
            "name": "InputdemoComponent",
            "id": "component-InputdemoComponent-2ed3a9b504b0ef4c594699cc32f7e1ea",
            "file": "src/app/showcase/components/inputdemo/inputdemo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sh-inputdemo",
            "styleUrls": [
                "./inputdemo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./inputdemo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sh-inputdemo',\n  templateUrl: './inputdemo.component.html',\n  styleUrls: ['./inputdemo.component.scss']\n})\nexport class InputdemoComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./inputdemo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<input sh-input />\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-f27d5dccd2669b12d601cd1e087dffc6",
            "file": "src/app/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sh-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sh-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss']\n})\nexport class SelectComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  select works!\n</p>\n"
        },
        {
            "name": "ShAutocompleteOptionComponent",
            "id": "component-ShAutocompleteOptionComponent-f385a387d1bb0cdb9e6c5ed20b96e17b",
            "file": "src/app/components/autocomplete/autocomplete-option.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "shAutocompleteOption",
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sh-autocomplete-option",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"sh-select-item-option-content\">\n  <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "line": 30,
                    "type": "string"
                },
                {
                    "name": "value",
                    "line": 29,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "selectViaInteraction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, ViewEncapsulation, Input } from '@angular/core';\n\n@Component({\n  selector: 'sh-autocomplete-option',\n  exportAs: 'shAutocompleteOption',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  template: `\n  <div class=\"sh-select-item-option-content\">\n    <ng-content></ng-content>\n  </div>\n  `,\n  host: {\n    role: 'menuitem',\n    class: 'sh-select-item sh-select-item-option',\n    '[class.sh-select-item-option-selected]': 'selected',\n    '[class.sh-select-item-option-active]': 'active',\n    '[class.sh-select-item-option-disabled]': 'shDisabled',\n   // '[attr.aria-selected]': 'selected.toString()',\n   // '[attr.aria-disabled]': 'shDisabled.toString()',\n    '(click)': 'selectViaInteraction()',\n    '(mouseenter)': 'onMouseEnter()',\n    '(mousedown)': '$event.preventDefault()'\n  }\n})\nexport class ShAutocompleteOptionComponent {\n\n  @Input() value: any;\n  @Input() label?: string;\n  constructor() { }\n\n  selectViaInteraction(): void {\n  }\n\n  onMouseEnter() {\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "preserveWhitespaces": false,
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 30
            }
        },
        {
            "name": "ShButton",
            "id": "component-ShButton-b597fb1147820259ae510e415c446d64",
            "file": "src/app/components/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "shButton",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button[shButton]",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 21,
                    "type": "boolean"
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "line": 20
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loading$",
                    "defaultValue": "new Subject<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getHostElement",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "_hasHostAttributes",
                    "args": [
                        {
                            "name": "attributes",
                            "type": "string[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "attributes",
                            "type": "string[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation, ChangeDetectionStrategy, Input, ElementRef } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport type ShButtonType = 'primary' | 'default' | 'danger' | 'link' | 'text' | null;\n\nconst BUTTON_HOST_ATTRIBUTES = [\n  'sh-button'\n];\n\n@Component({\n  selector: 'button[shButton]',\n  exportAs: 'shButton',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShButton implements OnInit {\n  @Input()\n  loading = false;\n  @Input() disabled: boolean = false;\n  private loading$ = new Subject<boolean>();\n  // tslint:disable-next-line:variable-name\n  private _elementRef: ElementRef;\n\n  constructor(elementRef: ElementRef) {\n   this._elementRef = elementRef;\n\n   for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n   elementRef.nativeElement.classList.add('sh-button-base');\n  }\n\n  ngOnInit() {\n  }\n\n  // tslint:disable-next-line:typedef\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n\n  // tslint:disable-next-line:typedef\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$sh-button-padding: 0 16px !default;\n$sh-button-min-width: 64px !default;\n$sh-button-margin: 0 !default;\n$sh-button-line-height: 36px !default;\n$sh-button-border-radius: 4px !default;\n\n/* @mixin mat-button-reset {\n    @include user-select(none);\n    cursor: pointer;\n    outline: none;\n    border: none;\n    -webkit-tap-highlight-color: transparent;\n  \n    // The `outline: none` from above works on all browsers, however Firefox also\n    // adds a special `focus-inner` which we have to disable explicitly. See:\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Firefox\n    &::-moz-focus-inner {\n      border: 0;\n    }\n}\n\n@mixin mat-button-base {\n    box-sizing: border-box;\n    position: relative;\n  \n    // Reset browser <button> styles.\n    @include mat-button-reset();\n\n    display: inline-block;\n    white-space: nowrap;\n    text-decoration: none;\n    vertical-align: baseline;\n    text-align: center;\n    overflow: visible;\n\n    &.sh-button-disabled {\n        cursor: default;\n    }\n}\n*/\n\n.sh-button-base  {\n    cursor: pointer;\n    outline: none;\n    border: none;\n    -webkit-tap-highlight-color: transparent;\n  \n    // The `outline: none` from above works on all browsers, however Firefox also\n    // adds a special `focus-inner` which we have to disable explicitly. See:\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Firefox\n    &::-moz-focus-inner {\n      border: 0;\n    }\n\n    box-sizing: border-box;\n    position: relative;\n  \n    display: inline-block;\n    white-space: nowrap;\n    text-decoration: none;\n    vertical-align: baseline;\n    text-align: center;\n    overflow: visible;\n\n     // Sizing.\n    margin: $sh-button-margin;\n    min-width: $sh-button-min-width;\n    line-height: $sh-button-line-height;\n    padding: $sh-button-padding;\n    border-radius: $sh-button-border-radius;\n\n    &.sh-button-disabled {\n        cursor: default;\n    }\n}\n\n.sh-button-base:active {\n    border: 1px solid blue;\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "  \n<span class=\"sh-button-wrapper\"><ng-content></ng-content></span>\n<span *ngIf='loading'></span>\n<span class=\"sh-button-ripple\"></span>\n<span class=\"sh-button-focus-overlay\"></span>"
        },
        {
            "name": "TimelineComponent",
            "id": "component-TimelineComponent-12d54f8f7aefe0439c1c04f8dbefd3b6",
            "file": "src/app/components/timeline/timeline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sh-timeline",
            "styleUrls": [
                "./timeline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sh-timeline',\n  templateUrl: './timeline.component.html',\n  styleUrls: ['./timeline.component.scss']\n})\nexport class TimelineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./timeline.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  timeline works!\n</p>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AutocompletedemoModule"
                        },
                        {
                            "name": "ButtondemoModule"
                        },
                        {
                            "name": "InputdemoModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AutocompletedemoModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AutocompletedemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AutocompleteModule"
                        },
                        {
                            "name": "InputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AutocompletedemoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AutocompleteModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AutocompleteComponent"
                        },
                        {
                            "name": "ShAutocompleteOptionComponent"
                        },
                        {
                            "name": "ShAutocompleteTriggerDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "InputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AutocompleteComponent"
                        },
                        {
                            "name": "ShAutocompleteTriggerDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtondemoModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtondemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtondemoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputdemoModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputdemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "InputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputdemoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShInputDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ShInputDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShButton"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ShButton"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TimelineModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TimelineComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "BUTTON_HOST_ATTRIBUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.component.ts",
                "type": "[]",
                "defaultValue": "[\n  'sh-button'\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/general/buttons.stories.ts",
                "type": "object",
                "defaultValue": "{\n  imports: [\n    ShButtonModule,\n  ],\n}"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/general/buttons.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: modules,\n  template: `\n    <button shButton> Button </button>\n  `,\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SH_AUTOCOMPLETE_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/autocomplete/autocomplete-trigger.ts",
                "type": "ExistingProvider",
                "defaultValue": "{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ShAutocompleteTriggerDirective),\n    multi: true\n  }"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ShButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"default\" | \"danger\" | \"link\" | \"text\" | null",
                "file": "src/app/components/button/button.component.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/components/button/button.component.ts": [
                {
                    "name": "BUTTON_HOST_ATTRIBUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.component.ts",
                    "type": "[]",
                    "defaultValue": "[\n  'sh-button'\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/general/buttons.stories.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/general/buttons.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  imports: [\n    ShButtonModule,\n  ],\n}"
                },
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/general/buttons.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: modules,\n  template: `\n    <button shButton> Button </button>\n  `,\n})"
                }
            ],
            "src/app/components/autocomplete/autocomplete-trigger.ts": [
                {
                    "name": "SH_AUTOCOMPLETE_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/autocomplete/autocomplete-trigger.ts",
                    "type": "ExistingProvider",
                    "defaultValue": "{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ShAutocompleteTriggerDirective),\n    multi: true\n  }"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/components/button/button.component.ts": [
                {
                    "name": "ShButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"default\" | \"danger\" | \"link\" | \"text\" | null",
                    "file": "src/app/components/button/button.component.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/autocomplete/autocomplete-option.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShAutocompleteOptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/autocomplete/autocomplete-trigger.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ShAutocompleteTriggerDirective",
                "coveragePercent": 4,
                "coverageCount": "1/24",
                "status": "low"
            },
            {
                "filePath": "src/app/components/autocomplete/autocomplete-trigger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SH_AUTOCOMPLETE_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/autocomplete/autocomplete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutocompleteComponent",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShButton",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BUTTON_HOST_ATTRIBUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ShInputDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/timeline/timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/showcase/components/autocompletedemo/autocompletedemo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutocompletedemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/showcase/components/buttondemo/buttondemo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtondemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/showcase/components/inputdemo/inputdemo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputdemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/general/buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/general/buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}