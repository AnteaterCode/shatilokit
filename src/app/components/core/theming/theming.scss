@function mat-contrast($palette, $hue) {
    @return map-get(map-get($palette, contrast), $hue);
}

@function mat-palette($base-palette, $default: 500, $lighter: 100, $darker: 700, $text: $default) {
    $result: map_merge($base-palette, (
      default: map-get($base-palette, $default),
      lighter: map-get($base-palette, $lighter),
      darker: map-get($base-palette, $darker),
      text: map-get($base-palette, $text),
  
      default-contrast: mat-contrast($base-palette, $default),
      //lighter-contrast: mat-contrast($base-palette, $lighter),
      //darker-contrast: mat-contrast($base-palette, $darker)
    ));
  
    // For each hue in the palette, add a "-contrast" color to the map.
    @each $hue, $color in $base-palette {
      $result: map_merge($result, (
        // '#{$hue}-contrast': mat-contrast($base-palette, $hue)
      ));
    }
  
    @return $result;
}

@function _mat-create-light-color-config($primary, $accent, $warn: null) {
    @return (
      primary: $primary,
      accent: $accent,
      is-dark: false,
      foreground: $mat-light-theme-foreground,
      background: $mat-light-theme-background,
    );
  }

@function mat-light-theme($primary, $accent: null, $warn: null) {
    @return  (
      primary: $primary,
      accent: $accent,
      warn: $warn
    );
}


@function mat-get-color-config($theme, $default: null) {
    @return $theme;
}


@function sh-color($palette, $hue: default, $opacity: null) {
  // If hueKey is a number between zero and one, then it actually contains an
  // opacity value, so recall this function with the default hue and that given opacity.
  //@if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
  //  @return mat-color($palette, default, $hue);
 // }
  $color: map-get($palette, $hue);
 // @if (type-of($color) != color) {
    // If the $color resolved to something different from a color (e.g. a CSS variable),
    // we can't apply the opacity anyway so we return the value as is, otherwise Sass can
    // throw an error or output something invalid.
  @return $color;
 // }

//  @return rgba($color, if($opacity == null, opacity($color), $opacity));
}
